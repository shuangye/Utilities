#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

# Created by Papillon. Oct 31, 2017.

import os
import datetime
import dbm_field
import dbm_entity
import dbm_config

G_namespace_PREFIX = dbm_config.G_namespace_PREFIX;
G_namespace_prefix = dbm_config.G_namespace_prefix;



def get_guard_macro(file_path):
    file_base_name = os.path.basename(file_path)
    header_guard_macro = "__" + file_base_name.replace('.', '_').upper() + "__"
    return header_guard_macro


def gen_entities_prototype_header(file_out, file_path):
    header_guard_macro = get_guard_macro(file_path)
    print("#pragma once", file = file_out, end = '\n');
    print("#ifndef {guard}".format(guard = header_guard_macro), file = file_out, end = '\n');
    print("#define {guard}".format(guard = header_guard_macro), file = file_out, end = '\n');
    print("", file = file_out, end = '\n')
    print("/* Created by Papillon. {now}. */".format(now = datetime.datetime.now().strftime("%c")), file = file_out, end = '\n')
    print("/* WARNING: DO NOT EDIT THIS FILE. IT IS GENERATED BY A SCRIPT AUTOMATICALLY. */", file = file_out, end = '\n')
    print("", file = file_out, end = '\n')
    print("#include <osa/osa.h>  /* primary types definitions */", file = file_out, end = '\n')
    print("", file = file_out, end = '\n')
    print("", file = file_out, end = '\n')


def gen_entities_prototype_footer(file_out, file_path):
    header_guard_macro = get_guard_macro(file_path)
    print("#endif  /* {guard} */".format(guard = header_guard_macro), file = file_out, end = '\n');
    print("", file = file_out, end = '\n')


# generate C struct definitions, like this:
#
# struct prototype definition  
# typedef struct XXX {   
#     Char                uuid[36];                     /* [00] uuid */ 
# } XXX;
#
def gen_entities_prototype(entity, file_out):
    global G_namespace_PREFIX, G_namespace_prefix;
    entity_name = '{prefix}_{name}'.format(prefix = G_namespace_PREFIX, name = entity.singular_name);
    count = len(entity.fields)
    
    print("#pragma pack(push, 1)", file = file_out, end = '\n')
    print("typedef struct {entity_name}".format(entity_name = entity_name), file = file_out, end = '\n')
    print("{", file = file_out, end = '\n');
                
    for i in range(0, count):
        field = entity.fields[i];
        field_size = ""
        if (field.c_type == "Char" and field.length > 0): 
            field_size = "[{length}]".format(length = field.length);
        print("".ljust(4) 
              + "{field_type_c}".format(field_type_c = field.c_type).ljust(20)
              + "{field_name}{field_size};".format(field_name = field.name, field_size = field_size,).ljust(30)
              + "/* [{counter:02}] {field_comment} */".format(counter = i, field_comment = field.comment),
              file = file_out, end = '\n')
    
    print("}} {entity_name};".format(entity_name = entity_name), file = file_out, end = '\n');
    print("#pragma pack(pop)", file = file_out, end = '\n')
    print("", file = file_out, end = '\n' * 2);
    


def gen_entities_for_c(entities, path):
    try:        
        file_entities_h = open(path, mode = "w+", encoding = "utf8")
    except OSError as e:
        print("Failed to open file for writing: " + str(e.errno) + e.strerror) 

    gen_entities_prototype_header(file_entities_h, path)

    for entity in entities:
        gen_entities_prototype(entity, file_entities_h);

    gen_entities_prototype_footer(file_entities_h, path)


def main(entities, path):
    gen_entities_for_c(entities, path);